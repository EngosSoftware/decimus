use decimus::{BidUint128, bid128_from_int32};

macro_rules! check {
  ($x:expr, $expected:expr) => {
    let expected = BidUint128 { w: [$expected[1], $expected[0]] };
    let actual = bid128_from_int32($x);
    assert_eq!(expected, actual);
  };
}

#[test]
fn _0001() {
  check!(-1250716900, [0xb040000000000000, 0x000000004a8c6ce4]);
}

#[test]
fn _0002() {
  check!(-1375453304, [0xb040000000000000, 0x0000000051fbc078]);
}

#[test]
fn _0003() {
  check!(1450740614, [0x3040000000000000, 0x0000000056788b86]);
}

#[test]
fn _0004() {
  check!(-1834423832, [0xb040000000000000, 0x000000006d571618]);
}

#[test]
fn _0005() {
  check!(1930174213, [0x3040000000000000, 0x00000000730c1f05]);
}

#[test]
fn _0006() {
  check!(1947153827, [0x3040000000000000, 0x00000000740f35a3]);
}

#[test]
fn _0007() {
  check!(206409795, [0x3040000000000000, 0x000000000c4d9043]);
}

#[test]
fn _0008() {
  check!(2103044481, [0x3040000000000000, 0x000000007d59e981]);
}

#[test]
fn _0009() {
  check!(-244968231, [0xb040000000000000, 0x000000000e99eb27]);
}

#[test]
fn _0010() {
  check!(-328472007, [0xb040000000000000, 0x00000000139415c7]);
}

#[test]
fn _0011() {
  check!(-430827320, [0xb040000000000000, 0x0000000019ade738]);
}

#[test]
fn _0012() {
  check!(472411624, [0x3040000000000000, 0x000000001c286de8]);
}

#[test]
fn _0013() {
  check!(-503478515, [0xb040000000000000, 0x000000001e0278f3]);
}

#[test]
fn _0014() {
  check!(620564199, [0x3040000000000000, 0x0000000024fd0ee7]);
}

#[test]
fn _0015() {
  check!(648685195, [0x3040000000000000, 0x0000000026aa268b]);
}

#[test]
fn _0016() {
  check!(734426893, [0x3040000000000000, 0x000000002bc6770d]);
}

#[test]
fn _0017() {
  check!(774990435, [0x3040000000000000, 0x000000002e316a63]);
}

#[test]
fn _0018() {
  check!(797130594, [0x3040000000000000, 0x000000002f833f62]);
}

#[test]
fn _0019() {
  check!(-893748152, [0xb040000000000000, 0x00000000354583b8]);
}

#[test]
fn _0020() {
  check!(-958871488, [0xb040000000000000, 0x00000000392737c0]);
}
